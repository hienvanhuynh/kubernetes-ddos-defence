#{{- if .Values.preset.enabled -}}
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: redis-config-1
#  namespace: kube-system
#data:
#  redis-config: ""
#---
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: kdd-admin
#  namespace: kube-system
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRole
#metadata:
#  name: kdd-admin
#  namespace: kube-system
#rules:
#- apiGroups: [""]
#  resources: ["pods"]
#  verbs: ["get", "watch", "list"]
#- apiGroups: [""]
#  resources: ["pods/exec"]
#  verbs: ["create"]
#- apiGroups: ["cilium.io"]
#  resources: ["ciliumclusterwidenetworkpolicies"]
#  verbs: ["get", "watch", "list", "create"]
#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: ClusterRoleBinding
#metadata:
#  name: kdd-admin
#  namespace: kube-system
#subjects:
#- kind: ServiceAccount
#  name: kdd-admin # case sensitive
#  namespace: kube-system
#  apiGroup: ""
#roleRef:
#  kind: ClusterRole
#  name: kdd-admin
#  apiGroup: "rbac.authorization.k8s.io"
#---
#{{- end }}
{{- if .Values.ddosDetection.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ddos-detection
  namespace: kube-system
  labels:
    module: detection
spec:
  replicas: 1
  selector:
    matchLabels:
      module: detection
  template:
    metadata:
      labels:
        module: detection
    spec:
      containers:
      - name: ddos-detection
        image: {{ .Values.imageRegistry }}/ddos-detection
        imagePullPolicy: Always
{{- end }}
{{- if .Values.executor.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: executor
  namespace: kube-system
  labels:
    kdd-component: executor
spec:
  replicas: 1
  selector:
    matchLabels:
      kdd-component: executor
  template:
    metadata:
      labels:
        kdd-component: executor
    spec:
      serviceAccountName: kdd-admin
      containers:
      - name: executor
        image: {{ .Values.imageRegistry }}/executor
        imagePullPolicy: Always
{{- end }}
{{- if .Values.kddui.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kddui
  namespace: kube-system
  labels:
    kdd-component: kddui
spec:
  replicas: 1
  selector:
    matchLabels:
      kdd-component: kddui
  template:
    metadata:
      labels:
        kdd-component: kddui
    spec:
      serviceAccountName: kdd-admin
      containers:
      - name: kddui
        image: {{ .Values.imageRegistry }}/kddui
        imagePullPolicy: Always
{{- end }}
{{- if .Values.targetApp.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  labels:
    app: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: {{ .Values.imageRegistry }}/nodeserver 
        imagePullPolicy: Always
        ports:
        - containerPort: 5050
{{- end }}
{{- if .Values.normalUser.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: normal-user
  labels:
    machine: user
spec:
  replicas: 3
  selector:
    matchLabels:
      machine: user
  template:
    metadata:
      labels:
        machine: user
    spec:
      containers:
      - name: normal-user
        image: {{ .Values.imageRegistry }}/normal-user
        imagePullPolicy: Always
{{- end }}
{{- if .Values.pythonAttacker.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-attacker
  labels:
    machine: python-attacker
spec:
  replicas: 1
  selector:
    matchLabels:
      machine: python-attacker
  template:
    metadata:
      labels:
        machine: python-attacker
    spec:
      containers:
      - name: python-attacker
        image: {{ .Values.imageRegistry }}/python-attacker
        imagePullPolicy: Always
{{- end }}
{{- if .Values.scraper.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper
  namespace: kube-system
  labels:
    kdd-component: scraper
spec:
  replicas: 1
  selector:
    matchLabels:
      kdd-component: scraper
  template:
    metadata:
      labels:
        kdd-component: scraper
    spec:
      serviceAccountName: kdd-admin
      containers:
      - name: scraper
        image: {{ .Values.imageRegistry }}/scraper
        imagePullPolicy: Always
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kube-system
  labels:
    module: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      module: redis
  template:
    metadata:
      labels:
        module: redis
    spec:
      containers:
      - name: redis
        image: redis:5.0.4
        command:
          - redis-server
          - "/redis-master/redis.conf"
        env:
        - name: MASTER
          value: "true"
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: "0.1"
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        - mountPath: /redis-master
          name: config
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: redis-config-1
            items:
            - key: redis-config
              path: redis.conf
---
{{- if .Values.attacker.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: attacker
  labels:
    machine: attacker
spec:
  replicas: 1
  selector:
    matchLabels:
      machine: attacker
  template:
    metadata:
      labels:
        machine: attacker
    spec:
      containers:
      - name: attacker
        image: {{ .Values.imageRegistry }}/attacker
        imagePullPolicy: Always
{{- end }}